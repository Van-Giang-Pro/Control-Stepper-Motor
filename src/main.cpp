#include <Arduino.h>

// C·∫•u h√¨nh ch√¢n ƒëi·ªÅu khi·ªÉn
const int PUL = 2; // Ch√¢n xung (Pulse)
const int DIR = 3; // Ch√¢n h∆∞·ªõng (Direction)
const int ENA = 4; // Ch√¢n k√≠ch ho·∫°t (Enable)

// Th√¥ng s·ªë ƒë·ªông c∆° Nema 17
const int STEP_PER_REV = 200; // S·ªë b∆∞·ªõc tr√™n m·ªôt v√≤ng
const int MICROSTEPS = 16; // S·ªë microsteps tr√™n m·ªôt b∆∞·ªõc
const int TOTAL_STEPS = STEP_PER_REV * MICROSTEPS; // T·ªïng s·ªë b∆∞·ªõc tr√™n 1 v√≤ng
const float DEGREES_PER_STEP = 360.0 / TOTAL_STEPS; // S·ªë ƒë·ªô tr√™n m·ªôt b∆∞·ªõc

// Bi·∫øn ƒëi·ªÅu khi·ªÉn
float currentPos = 0.0; // V·ªã tr√≠ hi·ªán t·∫°i (ƒë·ªô)
int stepDelay = 50; // Delay gi·ªØa c√°c b∆∞·ªõc (microseconds)
bool motorOn = true; // Tr·∫°ng th√°i ƒë·ªông c∆°

// Test ƒë·ªông c∆°
void testMotor() {
    if (!motorOn) {
        Serial.println("‚ùå ƒê·ªông c∆° ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");
        return;
    }

    Serial.println("‚úÖ B·∫Øt ƒë·∫ßu test ƒë·ªông c∆°");

    // Test chi·ªÅu thu·∫≠n
    Serial.println("Test thu·∫≠n chi·ªÅu 32000 b∆∞·ªõc");
    digitalWrite(DIR, HIGH);
    delayMicroseconds(10);

    for (int i = 0; i < 32000; i++) {
        digitalWrite(PUL, HIGH);
        delayMicroseconds(stepDelay);
        digitalWrite(PUL, LOW);
        delayMicroseconds(stepDelay);

        if ((i + 1) % 3200 == 0) {
            Serial.print("B∆∞·ªõc : ");
            Serial.println(i + 1);
        }
    }

    Serial.println("‚úÖ Ho√†n th√†nh chi·ªÅu thu·∫≠n");
    delay(1000);

    // Test chi·ªÅu ng∆∞·ª£c
    Serial.println("Test ng∆∞·ª£c chi·ªÅu 32000 b∆∞·ªõc");
    digitalWrite(DIR, LOW);
    delayMicroseconds(10);

    for (int i = 0; i < 32000; i++) {
        digitalWrite(PUL, HIGH);
        delayMicroseconds(stepDelay);
        digitalWrite(PUL, LOW);
        delayMicroseconds(stepDelay);

        if ((i + 1) % 3200 == 0) {
            Serial.print("B∆∞·ªõc : ");
            Serial.println(i + 1);
        }
    }

    Serial.println("‚úÖ Ho√†n th√†nh chi·ªÅu ngh·ªãch");
    delay(1000);
}

// Move theo s·ªë b∆∞·ªõc ƒë·∫ßu v√†o
void moveSteps(int steps, bool clockwise) {
    if (!motorOn || steps <= 0) return;

    // ƒê·∫∑t h∆∞·ªõng
    digitalWrite(DIR, clockwise ? HIGH : LOW); // HIGH = thu·∫≠n, LOW = ngh·ªãch
    delayMicroseconds(10); // ƒê·ª£i t√≠n hi·ªáu ·ªïn ƒë·ªãnh

    // Th·ª±c hi·ªán c√°c b∆∞·ªõc
    for (int i = 0; i < steps; i++) {
        digitalWrite(PUL, HIGH);
        delayMicroseconds(stepDelay);
        digitalWrite(PUL, LOW);
        delayMicroseconds(stepDelay);
        
        // Hi·ªÉn th·ªã ti·∫øn tr√¨nh cho s·ªë b∆∞·ªõc l·ªõn
        if (steps > 50 && (i + 1) % (steps / 10) == 0) {
            Serial.print(".");
        }
    }
    if (steps > 50) {
        Serial.println(); // Xu·ªëng d√≤ng sau d·∫•u ch·∫•m khi th·ª±c hi·ªán xong t·ªïng s·ªë b∆∞·ªõc
    }
}

// Quay ƒë·∫øn g√≥c tuy·ªát ƒë·ªëi
void rotateToAngle(float targetAngle) {
    if (!motorOn) {
        Serial.println("‚ùå ƒê·ªông c∆° ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");
        return;
    }

    // Chu·∫©n h√≥a g√≥c ƒë√≠ch
    while (targetAngle >= 360) targetAngle -= 360;
    while (targetAngle < 0) targetAngle += 360;

    // T√≠nh g√≥c c·∫ßn quay
    float angleDiff = targetAngle - currentPos;

    // Ch·ªçn ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t
    if (angleDiff > 180) angleDiff -= 360; // Khi quay thu·∫≠n chi·ªÅu qu√° l·ªõn, chuy·ªÉn sang ng∆∞·ª£c chi·ªÅu
    if (angleDiff < -180) angleDiff += 360; // Khi quay ng∆∞·ª£c chi·ªÅu qu√° l·ªõn, chuy·ªÉn sang thu·∫≠n chi·ªÅu

    if (abs(angleDiff) < DEGREES_PER_STEP) {
        Serial.println("‚úÖ ƒê√£ ·ªü v·ªã tr√≠ m·ª•c ti√™u");
        return;
    }

    bool clockwise = angleDiff > 0;
    int steps = round(abs(angleDiff) / DEGREES_PER_STEP);

    Serial.print("T·ª´ ");
    Serial.print(currentPos, 2);
    Serial.print("¬∞ ƒë·∫øn ");
    Serial.print(targetAngle, 2);
    Serial.print("¬∞ (");
    Serial.print(steps);
    Serial.print(" b∆∞·ªõc ");
    Serial.print(clockwise ? "thu·∫≠n" : "ng∆∞·ª£c");
    Serial.println(" chi·ªÅu)");

    moveSteps(steps, clockwise);
    currentPos = targetAngle;

    Serial.print("‚úÖ ƒê√£ move ƒë·∫øn v·ªã tr√≠ : ");
    Serial.print(currentPos, 2);
    Serial.println("¬∞");
}

// Quay ƒë·∫øn g√≥c t∆∞∆°ng ƒë·ªëi
void rotateRelative(float angle, bool clockwise) {
    if (!motorOn) {
        Serial.println("‚ùå ƒê·ªông c∆° ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");
        return;
    }

    int steps = round(angle / DEGREES_PER_STEP);
    moveSteps(steps, clockwise);

    // C·∫≠p nh·∫≠t v·ªã tr√≠
    if (clockwise) {
        currentPos += angle;
    }
    else {
        currentPos -= angle;
    }

    // Chu·∫©n h√≥a v·ªã tr√≠ (0 - 360)
    while (currentPos >= 360) currentPos -= 360;
    while (currentPos < 0) currentPos += 360;

    Serial.print("‚úÖ V·ªã tr√≠ m·ªõi : ");
    Serial.print(currentPos, 2);
    Serial.println("¬∞");
}

// Ki·ªÉm tra g√≥c h·ª£p l·ªá
bool isValidAngle(float angle) {
    if (angle <0 || angle > 360) {
        Serial.println("‚ùå G√≥c ph·∫£i t·ª´ 0-360¬∞");
        return false;
    }
    return true;
}

// ƒê·∫∑t t·ªëc ƒë·ªô
void setSpeed(int speed) {
    if(speed >= 200 && speed <= 2000) {
        stepDelay = speed;
        Serial.print("‚úÖ T·ªëc ƒë·ªô ƒë√£ ƒë·∫∑t : ");
        Serial.print(speed);
        Serial.println(" Œºs");
    }
    else {
        Serial.println("‚ùå T·ªëc ƒë·ªô ph·∫£i t·ª´ 200-2000 Œºs");
    }
}

// K√≠ch ho·∫°t ƒë·ªông c∆°
void enableMotor() {
    motorOn = true;
    digitalWrite(ENA, HIGH);
    Serial.println("‚úÖ ƒê·ªông c∆° ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t");
}

// T·∫Øt ƒë·ªông c∆°
void disableMotor() {
    motorOn = false;
    digitalWrite(ENA, LOW);
    Serial.println("‚ö†Ô∏è ƒê·ªông c∆° ƒë√£ ƒë∆∞·ª£c t·∫Øt");
}

// V·ªÅ v·ªã tr√≠ g·ªëc
void goHome() {
    Serial.println("üè† ƒêang v·ªÅ v·ªã tr√≠ g√≥c");
    rotateToAngle(0);
}

// Reset v·ªã tr√≠
void resetPosition() {
    currentPos = 0.0;
    Serial.println("üîÑ V·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c reset v·ªÅ 0¬∞");
}

// Hi·ªÉn th·ªã tr·∫°ng th√°i
void printStatus() {
    Serial.println("\n========== Tr·∫°ng Th√°i ==========");
    Serial.print("V·ªã tr√≠ hi·ªán t·∫°i : ");
    Serial.print(currentPos, 2);
    Serial.println("¬∞");
    Serial.print("T·ªëc ƒë·ªô : ");
    Serial.print(stepDelay);
    Serial.println(" Œºs");
    Serial.print("ƒê·ªô ch√≠nh x√°c : ");
    Serial.print(DEGREES_PER_STEP, 4);
    Serial.println("¬∞/b∆∞·ªõc");
    Serial.print("Tr·∫°ng th√°i : ");
    Serial.println(motorOn ? "K√≠ch ho·∫°t" : "T·∫Øt");
    Serial.println("==============================");
}

// Hi·ªÉn th·ªã Menu
void printMenu() {
    Serial.println("\n==========Menu ƒêi·ªÅu Khi·ªÉn==========");
    Serial.println("C√°c l·ªánh c√≥ s·∫µn : ");
    Serial.println("<g√≥c>               - Quay ƒë·∫øn g√≥c (0-360¬∞)");
    Serial.println("+<g√≥c>              - Quay thu·∫≠n chi·ªÅu");
    Serial.println("-<g√≥c>              - Quay ng∆∞·ª£c chi·ªÅu");
    Serial.println("speed <gi√°_tr·ªã>     - ƒê·∫∑t t·ªëc ƒë·ªô (200-2000Œºs)");
    Serial.println("home                - V·ªÅ v·ªã tr√≠ home");
    Serial.println("pos                 - Hi·ªÉn th·ªã v·ªã tr√≠");
    Serial.println("reset               - Reset v·ªã tr√≠ v·ªÅ 0");
    Serial.println("enable              - K√≠ch ho·∫°t ƒë·ªông c∆°");
    Serial.println("disable             - T·∫Øt ƒë·ªông c∆°");
    Serial.println("status              - Hi·ªÉn th·ªã tr·∫°ng th√°i");
    Serial.println("test                - Test ƒë·ªông c∆°");
    Serial.println("menu                - Hi·ªÉn th·ªã menu");
    Serial.println("====================================");
    Serial.println("Nh·∫≠p l·ªánh : ");
}

// X·ª≠ l√Ω l·ªánh
void processCommand(String command) {
    command.toLowerCase();

    // L·ªánh v·ªõi k√Ω t·ª± ƒë·∫∑c bi·ªát
    if(command.startsWith("+")) {
        float angle = command.substring(1).toFloat();
        if (isValidAngle(angle)) {
            Serial.print("Quay thu·∫≠n chi·ªÅu ");
            Serial.print(angle);
            Serial.println("¬∞");
            rotateRelative(angle, true);
        }
    }
    else if (command.startsWith("-")) {
        float angle = command.substring(1).toFloat();
        if (isValidAngle(angle)) {
            Serial.print("Quay ng∆∞·ª£c chi·ªÅu ");
            Serial.print(angle);
            Serial.println("¬∞");
            rotateRelative(angle, false);
        }
    }
    else if (command.startsWith("speed")) {
        int speed = command.substring(6).toInt();
        setSpeed(speed);
    }

    // L·ªánh t·ª´ kh√≥a
    else if (command == "home") {
        goHome();
    }
    else if (command == "pos") {
        Serial.print("V·ªã tr√≠ hi·ªán t·∫°i : ");
        Serial.print(currentPos, 2);
        Serial.println("¬∞");
    }
    else if (command == "reset") {
        resetPosition();
    }
    else if (command == "enable") {
        enableMotor();
    }
    else if (command == "disable") {
        disableMotor();
    }
    else if (command == "status") {
        printStatus();
    }
    else if (command == "test") {
        testMotor();
    }
    else if (command == "menu") {
        printMenu();
    }
    else {
        // G√≥c tuy·ªát ƒë·ªëi
        float angle = command.toFloat();
        if (isValidAngle(angle)) {
            Serial.print("Quay ƒë·∫øn ");
            Serial.print(angle);
            Serial.println("¬∞");
            rotateToAngle(angle);
        }
        else {
            Serial.println("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. G√µ menu ƒë·ªÉ xem h∆∞·ªõng d·∫´n");
        }
    }
}

void setup() {
    // Kh·ªüi t·∫°o serial
    Serial.begin(9600);

    // C·∫•u h√¨nh ch√¢n
    pinMode(PUL, OUTPUT);
    pinMode(DIR, OUTPUT);
    pinMode(ENA, OUTPUT);

    // Kh·ªüi t·∫°o tr·∫°ng th√°i
    digitalWrite(PUL, LOW);
    digitalWrite(DIR, LOW);
    digitalWrite(ENA, HIGH); // K√≠ch ho·∫°t ƒë·ªông c∆°

    // Hi·ªÉn th·ªã th√¥ng tin kh·ªüi ƒë·ªông
    Serial.println("========================================");
    Serial.println("ƒêi·ªÅu Khi·ªÉn ƒê·ªông C∆° B∆∞·ªõc Nema 17");
    Serial.println("========================================");
    Serial.print("T·ªïng s·ªë b∆∞·ªõc/v√≤ng : ");
    Serial.println(TOTAL_STEPS);
    Serial.print("ƒê·ªô ch√≠nh x√°c : ");
    Serial.print(DEGREES_PER_STEP, 4);
    Serial.print("¬∞/b∆∞·ªõc");
    Serial.print("T·ªëc ƒë·ªô hi·ªán t·∫°i : ");
    Serial.print(stepDelay);
    Serial.println(" Œºs");

    // Hi·ªÉn th·ªã menu
    printMenu();
}

void loop() {
    if (Serial.available() > 0) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        if(command.length() > 0) {
            processCommand(command);
        }
    }
}